package com.example.kmmplayground.shared.interactors.recipe_list

import com.example.kmmplayground.cache.RecipeDatabase
import com.example.kmmplayground.shared.datasource.cache.model.RecipeEntityMapper
import com.example.kmmplayground.shared.domain.data.DataState
import com.example.kmmplayground.shared.domain.model.Recipe
import com.example.kmmplayground.shared.domain.util.DateUtil
import com.example.kmmplayground.shared.util.RECIPE_PAGINATION_PAGE_SIZE
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow

/**
 * Restore a list of recipes after process death.
 */
class RestoreRecipes(
    private val recipeDatabase: RecipeDatabase,
    private val entityMapper: RecipeEntityMapper,
    private val dateUtil: DateUtil,
) {
    fun execute(
        page: Int,
        query: String
    ): Flow<DataState<List<Recipe>>> = flow {
        try {
            emit(DataState.loading())

            // just to show pagination
            delay(1000)

            // query the cache
            val queries = recipeDatabase.recipeDbQueries
            val cacheResult = if (query.isBlank()){
                queries.restoreAllRecipes(
                    pageSize = RECIPE_PAGINATION_PAGE_SIZE.toLong(),
                    page = page.toLong()
                )
            }
            else{
                queries.restoreRecipes(
                    query = query,
                    pageSize = RECIPE_PAGINATION_PAGE_SIZE.toLong(),
                    page = page.toLong()
                )
            }.executeAsList()

            // emit List<Recipe> from cache
            // Must manually map this since Recipe_Entity object is generated by SQL Delight
            val list: ArrayList<Recipe> = ArrayList()
            for(entity in cacheResult){
                list.add(Recipe(
                    id = entity.id.toInt(),
                    title = entity.title,
                    publisher = entity.publisher,
                    featuredImage = entity.featured_image,
                    rating = entity.rating.toInt(),
                    sourceUrl = entity.source_url,
                    ingredients = entityMapper.convertIngredientsToList(entity.ingredients),
                    dateAdded = dateUtil.toLocalDate(entity.date_added),
                    dateUpdated = dateUtil.toLocalDate(entity.date_updated)
                ))
            }
            emit(DataState.success(list))

        }catch (e: Exception){
            emit(DataState.error<List<Recipe>>(e.message?: "Unknown Error"))
        }
    }
}

